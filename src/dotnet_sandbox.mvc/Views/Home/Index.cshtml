@model dotnet_sandbox.mvc.Models.MainPageViewModel

@{
    ViewData["Title"] = "Index";
}

<h2>Index</h2>

@*Render the main content*@

<h4>MainPageViewModel</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Index">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="MainPageName" class="control-label"></label>
                <input asp-for="MainPageName" class="form-control" />
                <span asp-validation-for="MainPageName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </form>
    </div>
</div>

@*Render a first collection over there*@
<div>
    <h3>First Partial</h3>
    <partial name="_firstPartial" model="Model.FirstPartialModel" />
</div>


<hr />
@*Render a second collection over there*@

<div>
    <h3>Second Partial</h3>
    <partial name="_secondPartial" model="Model.SecondPartialModel" />
</div>
<div>
    <a asp-action="Index">Back to List</a>
</div>

<hr />
<h2>
    using ViewComponents:
</h2>
<div>
    <h3>First ViewComponent</h3>
    @*Render a collection via viewcomponent with separate data source *@
    @*code behind is located in \ViewComponents\FirstViewComponent.cs  The "ViewComponent" Suffix is ignored when invoking the component *@
    @*The view is located in \Shared\Components\First\Default.cshtml, the model is populated from the components code behind class, and if the view name is empty the "default" will be used *@
    @await Component.InvokeAsync("First");
</div>

<div>
    <h3>Second ViewComponent</h3>
    @*Render a collection via viewcomponent with separate data source dependent on int parameter*@
    @*code behind is located in \ViewComponents\SecondViewComponent.cs  The "ViewComponent" Suffix is ignored when invoking the component *@
    @*The view is located in \Shared\Components\Second\SecondNotDefaultView.cshtml, the model is populated from the components code behind class *@
    @await Component.InvokeAsync("Second", 8);

</div>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
